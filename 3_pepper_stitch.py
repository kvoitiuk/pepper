import h5py
import argparse
import sys
from modules.python.TextColor import TextColor
from modules.python.Stitch import create_consensus_sequence


def perform_stitch(hdf_file_path, output_path, threads):
    with h5py.File(hdf_file_path, 'r') as hdf5_file:
        contigs = list(hdf5_file['predictions'].keys())

    consensus_fasta_file = open(output_path+'consensus.fa', 'w')
    for contig in contigs:
        sys.stderr.write(TextColor.YELLOW + "INFO: PROCESSING CONTIG: " + contig + "\n" + TextColor.END)

        with h5py.File(hdf_file_path, 'r') as hdf5_file:
            chunk_keys = sorted(hdf5_file['predictions'][contig].keys())

        consensus_sequence = create_consensus_sequence(hdf_file_path, contig, chunk_keys, threads)
        sys.stderr.write(TextColor.BLUE + "INFO: FINISHED PROCESSING " + contig + ", POLISHED SEQUENCE LENGTH: "
                         + str(len(consensus_sequence)) + ".\n" + TextColor.END)

        # TODO: I should write a FASTA handler here. This is too sloppy.
        if len(consensus_sequence) > 0:
            consensus_fasta_file.write('>' + contig + "\n")
            consensus_fasta_file.write(consensus_sequence+"\n")

    hdf5_file.close()


if __name__ == '__main__':
    '''
    Processes arguments and performs tasks.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--sequence_hdf",
        type=str,
        required=True,
        help="H5PY file generated by HELEN."
    )
    parser.add_argument(
        "--output_dir",
        type=str,
        required=True,
        help="CONSENSUS output directory."
    )
    parser.add_argument(
        "--threads",
        type=int,
        default=5,
        help="Number of maximum threads for this region."
    )

    FLAGS, unparsed = parser.parse_known_args()
    perform_stitch(FLAGS.sequence_hdf, FLAGS.output_dir, FLAGS.threads)